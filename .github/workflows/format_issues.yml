name: Format Issues

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Single issue number to format'
        required: false
        type: string
      start_issue:
        description: 'Start issue number for range (requires end_issue)'
        required: false
        type: string
      end_issue:
        description: 'End issue number for range (requires start_issue)'
        required: false
        type: string
      dry_run:
        description: 'Log proposed changes without applying them'
        required: false
        type: boolean
        default: false

permissions:
  issues: write
  contents: read

jobs:
  format-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout specific script version from curation_ops
        uses: actions/checkout@v4
        with:
          repository: ror-community/curation_ops

      - name: List files after checkout for path verification
        run: |
          pwd
          ls -la
          if [ -d "format_issues" ]; then
            echo "'format_issues' directory exists. Contents:"
            ls -la format_issues/
          else
            echo "'format_issues' directory DOES NOT exist at the root of the checkout."
          fi

      - name: Set up Python
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f format_issues/requirements.txt ]; then
            echo "Found format_issues/requirements.txt. Installing dependencies..."
            python -m pip install -r format_issues/requirements.txt
          else
            echo "Could not find format_issues/requirements.txt."
            exit 1
          fi

      - name: Validate Inputs
        run: |
          # Input validation logic (as before)
          if [[ -n "${{ github.event.inputs.issue_number }}" && ( -n "${{ github.event.inputs.start_issue }}" || -n "${{ github.event.inputs.end_issue }}" ) ]]; then
            echo "Error: Cannot specify both single issue and issue range."
            exit 1
          fi
          if [[ -z "${{ github.event.inputs.issue_number }}" && ( -z "${{ github.event.inputs.start_issue }}" || -z "${{ github.event.inputs.end_issue }}" ) ]]; then
            echo "Error: Must specify either single issue number or both start and end issue numbers for a range."
            exit 1
          fi
          if [[ -n "${{ github.event.inputs.start_issue }}" && -z "${{ github.event.inputs.end_issue }}" ]]; then
            echo "Error: If start_issue is provided, end_issue must also be provided."
            exit 1
          fi
          if [[ -z "${{ github.event.inputs.start_issue }}" && -n "${{ github.event.inputs.end_issue }}" ]]; then
            echo "Error: If end_issue is provided, start_issue must also be provided."
            exit 1
          fi
          echo "Input validation passed."

      - name: Run Issue Formatting Script
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          REPO_PATH: ${{ github.repository }}
          ISSUE_NUMBER: ${{ github.event.inputs.issue_number }}
          START_ISSUE: ${{ github.event.inputs.start_issue }}
          END_ISSUE: ${{ github.event.inputs.end_issue }}
          DRY_RUN: ${{ github.event.inputs.dry_run }}
          PYTHON_PATH_DEBUG: $(python -c "import sys; print(':'.join(sys.path))")
        run: |
          echo "--- Debugging Environment Variables ---"
          echo "Target REPO_PATH for issue processing: $REPO_PATH"
          echo "ISSUE_NUMBER: $ISSUE_NUMBER"
          echo "START_ISSUE: $START_ISSUE"
          echo "END_ISSUE: $END_ISSUE"
          echo "DRY_RUN: $DRY_RUN"
          echo "Python from setup: ${{ steps.setup_python.outputs.python-path }}"
          echo "Python version: $(python --version)"
          echo "--- sys.path from Python interpreter: ---"
          python -c "import sys; import pprint; pprint.pprint(sys.path)"
          echo "--- Listing installed packages (pip list) ---"
          python -m pip list
          echo "--- Attempting to run Python script: format_issues/format_issues.py ---"
          python format_issues/format_issues.py